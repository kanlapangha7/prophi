// ========================================
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö - leg-raise-fix.js
// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô js/leg-raise-fix.js
// ========================================

console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤...');

// 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô analyzeLegRaise ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
function fixedAnalyzeLegRaise() {
    if (!poseResults || !poseResults.poseLandmarks) {
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pose results');
        return;
    }

    const landmarks = poseResults.poseLandmarks;
    
    // ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ‡∏™‡∏∞‡πÇ‡∏û‡∏Å ‡πÄ‡∏Ç‡πà‡∏≤ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤
    const hipLeft = 23, hipRight = 24;
    const kneeLeft = 25, kneeRight = 26;
    const ankleLeft = 27, ankleRight = 28;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö landmarks ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!validateLandmarks(landmarks, [hipLeft, hipRight, kneeLeft, kneeRight])) {
        showFeedback('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≤‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô');
        return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏Ç‡∏≤‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡πà‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏™‡∏∞‡πÇ‡∏û‡∏Å)
    const leftLegHeight = Math.abs(landmarks[hipLeft].y - landmarks[kneeLeft].y);
    const rightLegHeight = Math.abs(landmarks[hipRight].y - landmarks[kneeRight].y);
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∏‡∏°‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (0-90 ‡∏≠‡∏á‡∏®‡∏≤)
    const leftLegAngle = Math.min(90, leftLegHeight * 300);
    const rightLegAngle = Math.min(90, rightLegHeight * 300);
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
    const maxAngle = Math.max(leftLegAngle, rightLegAngle);
    const activeSide = leftLegAngle > rightLegAngle ? '‡∏ã‡πâ‡∏≤‡∏¢' : '‡∏Ç‡∏ß‡∏≤';
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏∏‡∏°
    updateAngleTracking(maxAngle);

    // ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
    const MIN_ANGLE = 15;      // ‡∏°‡∏∏‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡∏•‡∏î‡∏•‡∏á)
    const TARGET_ANGLE = 45;   // ‡∏°‡∏∏‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏•‡∏î‡∏•‡∏á)
    const ANGLE_THRESHOLD = 8; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡∏•‡∏î‡∏•‡∏á)

    console.log(`ü¶µ ‡∏Ç‡∏≤${activeSide}: ${Math.round(maxAngle)}¬∞ | ‡πÄ‡∏ü‡∏™: ${movementPhase} | ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤: ${Math.round(prevAngle)}¬∞`);

    // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    switch (movementPhase) {
        case 'rest':
            if (maxAngle > MIN_ANGLE && maxAngle > prevAngle + ANGLE_THRESHOLD) {
                startMovementPhase('lifting', `‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡∏Å‡∏Ç‡∏≤${activeSide}... (${Math.round(maxAngle)}¬∞)`);
                console.log(`‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡∏Å‡∏Ç‡∏≤${activeSide} - ‡∏°‡∏∏‡∏°: ${Math.round(maxAngle)}¬∞`);
            }
            break;

        case 'lifting':
            if (maxAngle >= TARGET_ANGLE) {
                startMovementPhase('holding', `‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏Ç‡∏≤${activeSide} (${Math.round(maxAngle)}¬∞)`);
                startHoldTimer(2000); // ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ó‡πà‡∏≤ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                console.log(`‚úÖ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ - ‡∏°‡∏∏‡∏°: ${Math.round(maxAngle)}¬∞`);
            } else if (maxAngle < prevAngle - 10) {
                // ‡∏ñ‡πâ‡∏≤‡∏•‡∏î‡∏°‡∏∏‡∏°‡∏•‡∏á‡∏°‡∏≤‡∏Å‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
                movementPhase = 'rest';
                showFeedback('‡∏¢‡∏Å‡∏Ç‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
                console.log(`‚ö†Ô∏è ‡∏¢‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ - ‡∏°‡∏∏‡∏°: ${Math.round(maxAngle)}¬∞`);
            }
            break;

        case 'holding':
            if (maxAngle < TARGET_ANGLE - 10 && window.holdComplete) {
                startMovementPhase('lowering', `‡∏•‡∏î‡∏Ç‡∏≤${activeSide}‡∏•‡∏á... (${Math.round(maxAngle)}¬∞)`);
                console.log(`‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏î‡∏Ç‡∏≤ - ‡∏°‡∏∏‡∏°: ${Math.round(maxAngle)}¬∞`);
            }
            break;

        case 'lowering':
            if (maxAngle < MIN_ANGLE + 5) {
                completeRepetition('‡∏¢‡∏Å‡∏Ç‡∏≤', activeSide);
                window.holdComplete = false;
                console.log(`üéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${repCounter}`);
            }
            break;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    updateAccuracy(Math.min(95, (maxAngle / TARGET_ANGLE) * 100), 100);
    displayMovementInfo(`${Math.round(maxAngle)}¬∞ (${activeSide})`, '‡∏≠‡∏á‡∏®‡∏≤');
}

// 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô analyzeCurrentExercise
function fixAnalyzeCurrentExercise() {
    console.log('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç analyzeCurrentExercise...');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    window.analyzeCurrentExercise = function() {
        if (!poseResults || !poseResults.poseLandmarks) {
            return;
        }

        try {
            switch (currentExercise) {
                case 'butterfly-dance':
                    if (typeof analyzeArmRaise === 'function') {
                        analyzeArmRaise();
                    }
                    break;
                case 'peacock':
                    if (typeof analyzeElbowFlexion === 'function') {
                        analyzeElbowFlexion();
                    }
                    break;
                case 'dragon-claw':
                    if (typeof analyzeWristMovement === 'function') {
                        analyzeWristMovement();
                    }
                    break;
                case 'tiger-roar':
                    if (typeof analyzeKneeSpread === 'function') {
                        analyzeKneeSpread();
                    }
                    break;
                case 'flying':
                    console.log('ü¶µ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ fixedAnalyzeLegRaise...');
                    fixedAnalyzeLegRaise(); // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
                    break;
                default:
                    showFeedback('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á');
            }
        } catch (error) {
            console.error('‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡πà‡∏≤:', error);
            showFeedback('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á');
        }
    };
    
    console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç analyzeCurrentExercise ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
}

// 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏Ç‡∏≤‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
function calculateImprovedLegAngle(hip, knee, ankle) {
    if (!hip || !knee) return 0;
    
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
    const heightDiff = Math.abs(hip.y - knee.y);
    let angle1 = Math.min(90, heightDiff * 300);
    
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤ ‡πÉ‡∏ä‡πâ‡∏°‡∏∏‡∏°‡∏à‡∏£‡∏¥‡∏á
    let angle2 = 0;
    if (ankle) {
        const hipKneeDistance = calculateDistance(hip, knee);
        const kneeAnkleDistance = calculateDistance(knee, ankle);
        const hipAnkleDistance = calculateDistance(hip, ankle);
        
        // ‡πÉ‡∏ä‡πâ‡∏Å‡∏é‡πÇ‡∏Ñ‡πÑ‡∏ã‡∏ô‡πå
        if (hipKneeDistance > 0 && kneeAnkleDistance > 0) {
            const cosAngle = (hipKneeDistance * hipKneeDistance + kneeAnkleDistance * kneeAnkleDistance - hipAnkleDistance * hipAnkleDistance) / 
                           (2 * hipKneeDistance * kneeAnkleDistance);
            const clampedCos = Math.max(-1, Math.min(1, cosAngle));
            angle2 = Math.acos(clampedCos) * (180 / Math.PI);
            angle2 = Math.abs(180 - angle2); // ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏¢‡∏Å
        }
    }
    
    // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ
    return ankle && angle2 > 0 ? (angle1 + angle2) / 2 : angle1;
}

// 4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô debug
function debugLegRaiseDetailed() {
    if (!poseResults || !poseResults.poseLandmarks) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• landmarks');
        return;
    }

    const landmarks = poseResults.poseLandmarks;
    console.log('üîç Debug ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤:');
    console.log('- currentExercise:', currentExercise);
    console.log('- movementPhase:', movementPhase);
    console.log('- repCounter:', repCounter);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö landmarks ‡∏Ç‡∏≤
    const legLandmarks = {
        '‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏ã‡πâ‡∏≤‡∏¢ (23)': landmarks[23],
        '‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏Ç‡∏ß‡∏≤ (24)': landmarks[24],
        '‡πÄ‡∏Ç‡πà‡∏≤‡∏ã‡πâ‡∏≤‡∏¢ (25)': landmarks[25],
        '‡πÄ‡∏Ç‡πà‡∏≤‡∏Ç‡∏ß‡∏≤ (26)': landmarks[26],
        '‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤‡∏ã‡πâ‡∏≤‡∏¢ (27)': landmarks[27],
        '‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤‡∏Ç‡∏ß‡∏≤ (28)': landmarks[28]
    };
    
    Object.entries(legLandmarks).forEach(([name, landmark]) => {
        if (landmark) {
            console.log(`- ${name}: visibility=${landmark.visibility.toFixed(2)}, y=${landmark.y.toFixed(3)}`);
        } else {
            console.log(`- ${name}: ‡πÑ‡∏°‡πà‡∏û‡∏ö`);
        }
    });
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
    if (landmarks[23] && landmarks[25]) {
        const leftAngle = calculateImprovedLegAngle(landmarks[23], landmarks[25], landmarks[27]);
        console.log(`- ‡∏°‡∏∏‡∏°‡∏Ç‡∏≤‡∏ã‡πâ‡∏≤‡∏¢: ${leftAngle.toFixed(1)}¬∞`);
    }
    
    if (landmarks[24] && landmarks[26]) {
        const rightAngle = calculateImprovedLegAngle(landmarks[24], landmarks[26], landmarks[28]);
        console.log(`- ‡∏°‡∏∏‡∏°‡∏Ç‡∏≤‡∏Ç‡∏ß‡∏≤: ${rightAngle.toFixed(1)}¬∞`);
    }
}

// 5. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
function testLegRaiseSystem() {
    console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤...');
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if (typeof resetExerciseState === 'function') {
        resetExerciseState();
    }
    
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤
    currentExercise = 'flying';
    console.log('‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    console.log('üìã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
    console.log('- currentExercise:', currentExercise);
    console.log('- movementPhase:', movementPhase);
    console.log('- repCounter:', repCounter);
    console.log('- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fixedAnalyzeLegRaise:', typeof fixedAnalyzeLegRaise);
    console.log('- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô analyzeCurrentExercise:', typeof analyzeCurrentExercise);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    if (typeof updateExerciseInstructions === 'function') {
        updateExerciseInstructions();
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï dropdown
    const exerciseSelect = document.getElementById('exercise-select');
    if (exerciseSelect) {
        exerciseSelect.value = 'flying';
        // ‡∏ó‡∏£‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå event change
        const event = new Event('change');
        exerciseSelect.dispatchEvent(event);
    }
}

// 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
function runLegRaiseFix() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö...');
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const requiredFunctions = [
        'validateLandmarks', 'updateAngleTracking', 'startMovementPhase',
        'completeRepetition', 'startHoldTimer', 'updateAccuracy',
        'displayMovementInfo', 'showFeedback', 'calculateDistance'
    ];
    
    let missingFunctions = [];
    requiredFunctions.forEach(funcName => {
        if (typeof window[funcName] !== 'function') {
            missingFunctions.push(funcName);
        }
    });
    
    if (missingFunctions.length > 0) {
        console.error('‚ùå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ:', missingFunctions);
        return;
    }
    
    // 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç analyzeCurrentExercise
    fixAnalyzeCurrentExercise();
    
    // 3. ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å
    window.fixedAnalyzeLegRaise = fixedAnalyzeLegRaise;
    window.debugLegRaiseDetailed = debugLegRaiseDetailed;
    window.testLegRaiseSystem = testLegRaiseSystem;
    window.calculateImprovedLegAngle = calculateImprovedLegAngle;
    
    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    setTimeout(testLegRaiseSystem, 500);
    
    console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    console.log('üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:');
    console.log('1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà 5: ‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤ ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π');
    console.log('2. ‡∏Å‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å');
    console.log('3. ‡∏¢‡∏Å‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á‡∏°‡∏∏‡∏° 45 ‡∏≠‡∏á‡∏®‡∏≤');
    console.log('4. ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ó‡πà‡∏≤ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ');
    console.log('5. ‡∏•‡∏î‡∏Ç‡∏≤‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    console.log('üîß Debug: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ debugLegRaiseDetailed() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î');
}

// 7. ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
setTimeout(() => {
    runLegRaiseFix();
}, 1000);

// 8. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging
window.checkLegRaiseStatus = function() {
    console.log('=== ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤ ===');
    console.log('‚úÖ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏•‡∏±‡∏Å:');
    console.log('- currentExercise:', currentExercise);
    console.log('- movementPhase:', movementPhase);
    console.log('- repCounter:', repCounter);
    console.log('- isDetecting:', isDetecting);
    
    console.log('‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:');
    console.log('- fixedAnalyzeLegRaise:', typeof fixedAnalyzeLegRaise);
    console.log('- analyzeCurrentExercise:', typeof analyzeCurrentExercise);
    console.log('- validateLandmarks:', typeof validateLandmarks);
    console.log('- completeRepetition:', typeof completeRepetition);
    
    if (poseResults && poseResults.poseLandmarks) {
        console.log('‚úÖ ‡∏°‡∏µ landmarks:', poseResults.poseLandmarks.length, '‡∏à‡∏∏‡∏î');
        debugLegRaiseDetailed();
    } else {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ landmarks');
    }
};