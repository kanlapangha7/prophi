// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå main.js ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå missing.js
// ========================================

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö updateMovementData
function updateMovementData(side, scoreData) {
    if (!lastMovementData) {
        lastMovementData = {
            right: { angle: 0, timestamp: 0, quality: 0 },
            left: { angle: 0, timestamp: 0, quality: 0 }
        };
    }
    
    lastMovementData[side] = {
        angle: scoreData.currentAngle || 0,
        timestamp: Date.now(),
        quality: scoreData.total || 0
    };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö updateAngleTracking
function updateAngleTracking(newAngle) {
    if (!isNaN(newAngle) && newAngle >= 0 && newAngle <= 180) {
        prevAngle = currentAngle;
        currentAngle = newAngle;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö startMovementPhase
function startMovementPhase(phase, message) {
    movementPhase = phase;
    if (!lastRepTime || lastRepTime === 0) {
        lastRepTime = Date.now();
    }
    showFeedback(message);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö updateAccuracy
function updateAccuracy(currentValue, maxValue) {
    if (!accuracyElement) return;
    
    const accuracy = Math.min(95, Math.max(0, Math.round((currentValue / maxValue) * 100)));
    accuracyElement.textContent = `${accuracy}%`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö displayMovementInfo
function displayMovementInfo(value, unit) {
    const infoElement = document.querySelector('.movement-info');
    if (infoElement) {
        infoElement.textContent = `${value} ${unit}`;
    }
    console.log(`Movement Info: ${value} ${unit}`);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö updateCounters
function updateCounters() {
    if (repCountElement) {
        repCountElement.textContent = repCounter;
    }
    updateProgressBar();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö updateProgressBar
function updateProgressBar() {
    if (!progressBar || !progressText) return;
    
    const totalReps = targetReps * targetSets;
    const progress = Math.min(100, Math.round((exerciseCount / totalReps) * 100));
    
    progressBar.style.width = `${progress}%`;
    progressText.textContent = `‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${progress}%`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö checkSetCompletion
function checkSetCompletion() {
    if (repCounter >= targetReps) {
        if (setCounter >= targetSets) {
            completeAllSets();
        } else {
            startNewSet();
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö startNewSet
function startNewSet() {
    setCounter++;
    repCounter = 0;
    showFeedback(`‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏ã‡∏ï‡∏ó‡∏µ‡πà ${setCounter - 1} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏ï‡∏ó‡∏µ‡πà ${setCounter}`);
    updateCounters();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö completeAllSets
function completeAllSets() {
    showFeedback('‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!');
    
    const successAlert = document.querySelector('.success-alert');
    if (successAlert) {
        successAlert.style.display = 'block';
        setTimeout(() => {
            successAlert.style.display = 'none';
        }, 5000);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logExerciseEvent
function logExerciseEvent(event, details) {
    const timestamp = new Date().toLocaleTimeString('th-TH');
    
    if (!exerciseHistory) {
        exerciseHistory = [];
    }
    
    exerciseHistory.push({
        timestamp,
        event,
        details,
        exercise: currentExercise,
        side: autoDetectedSide
    });
    
    console.log(`[${timestamp}] ${event}: ${details}`);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö showFeedback
function showFeedback(message) {
    if (feedbackText) {
        feedbackText.textContent = message;
        feedbackText.style.color = '#333';
    }
    console.log('Feedback:', message);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö showError
function showError(message) {
    if (feedbackText) {
        feedbackText.textContent = message;
        feedbackText.style.color = '#ff4444';
    }
    console.error('Error:', message);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö updateSideIndicator
function updateSideIndicator() {
    const sideIndicator = document.querySelector('.side-indicator');
    if (sideIndicator) {
        sideIndicator.textContent = `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: ‡∏Ç‡πâ‡∏≤‡∏á${autoDetectedSide === 'right' ? '‡∏Ç‡∏ß‡∏≤' : '‡∏ã‡πâ‡∏≤‡∏¢'}`;
    }
    console.log(`Auto detected side: ${autoDetectedSide}`);
}

function resetExerciseState() {
    movementPhase = 'rest';
    repCounter = 0;
    setCounter = 1;
    exerciseCount = 0;
    currentAngle = 0;
    prevAngle = 0;
    correctPostureCounter = 0;
    lastRepTime = 0;
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡πà‡∏≤
    if (window.wristMovementCount) window.wristMovementCount = 0;
    if (window.lastWristPos) window.lastWristPos = null;
    if (window.holdComplete) window.holdComplete = false;
    if (window.holdTimer) {
        clearTimeout(window.holdTimer);
        window.holdTimer = null;
    }
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï angleHistory
    if (window.angleHistory) window.angleHistory = [];
    if (window.lastValidAngle) window.lastValidAngle = 0;
    
    updateCounters();
    showFeedback('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    
    console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö updateStartButton
function updateStartButton(enabled) {
    if (startButton) {
        startButton.disabled = !enabled;
        if (enabled) {
            startButton.innerHTML = '<i class="fas fa-play"></i> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å';
        } else {
            startButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°...';
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö calculateDistance
function calculateDistance(point1, point2) {
    if (!point1 || !point2) return 0;
    
    const dx = point1.x - point2.x;
    const dy = point1.y - point2.y;
    return Math.sqrt(dx * dx + dy * dy);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validateLandmarks
function validateLandmarks(landmarks, indices) {
    if (!landmarks || !Array.isArray(landmarks)) return false;
    
    return indices.every(index => {
        const landmark = landmarks[index];
        return landmark && 
               typeof landmark.x === 'number' && 
               typeof landmark.y === 'number' &&
               landmark.visibility > 0.5;
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö calculateAngle
function calculateAngle(pointA, pointB, pointC) {
    try {
        const BA = {x: pointA.x - pointB.x, y: pointA.y - pointB.y};
        const BC = {x: pointC.x - pointB.x, y: pointC.y - pointB.y};
        
        const dotProduct = BA.x * BC.x + BA.y * BC.y;
        const magnitudeBA = Math.sqrt(BA.x * BA.x + BA.y * BA.y);
        const magnitudeBC = Math.sqrt(BC.x * BC.x + BC.y * BC.y);
        
        if (magnitudeBA === 0 || magnitudeBC === 0) return 0;
        
        const cosAngle = dotProduct / (magnitudeBA * magnitudeBC);
        const clampedCos = Math.max(-1, Math.min(1, cosAngle));
        const angleRad = Math.acos(clampedCos);
        
        return angleRad * (180 / Math.PI);
    } catch (error) {
        console.warn('Error calculating angle:', error);
        return 0;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö startHoldTimer
function startHoldTimer(duration) {
    if (window.holdTimer) clearTimeout(window.holdTimer);
    
    window.holdComplete = false;
    let remaining = Math.floor(duration / 1000);
    
    const countdown = setInterval(() => {
        if (movementPhase !== 'spreading' && movementPhase !== 'holding') {
            clearInterval(countdown);
            return;
        }
        
        remaining--;
        
        if (remaining > 0) {
            showFeedback(`‡∏Ñ‡∏á‡∏ó‡πà‡∏≤... ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
        } else {
            clearInterval(countdown);
            window.holdComplete = true;
            showFeedback('‡∏Ñ‡∏á‡∏ó‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ó‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
        }
    }, 1000);
    
    window.holdTimer = countdown;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö completeRepetition
function completeRepetition(exerciseName, side) {
    movementPhase = 'rest';
    repCounter++;
    exerciseCount++;
    
    const repDuration = lastRepTime ? (Date.now() - lastRepTime) / 1000 : 0;
    lastRepTime = Date.now();
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡πà‡∏≤
    if (exerciseName === '‡∏Å‡∏£‡∏∞‡∏î‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠') {
        window.wristMovementCount = 0;
    }
    
    logExerciseEvent(`‡∏ó‡∏≥‡∏ó‡πà‡∏≤${exerciseName}‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`, 
        `‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${repCounter} (${side}) ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${repDuration.toFixed(1)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
    
    updateCounters();
    checkSetCompletion();
    
    showFeedback(`‡∏ó‡∏≥‡∏ó‡πà‡∏≤${exerciseName}‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (${repCounter}/${targetReps})`);
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞ Canvas (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
// ========================================

function setupCameraCanvas() {
    if (canvasElement && videoElement) {
        canvasElement.width = videoElement.videoWidth || 640;
        canvasElement.height = videoElement.videoHeight || 480;
    }
}

function drawPoseResults() {
    if (!canvasCtx || !poseResults) return;
    
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå canvas
    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
    
    // ‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
    if (videoElement && videoElement.videoWidth > 0) {
        canvasCtx.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);
    }
    
    if (poseResults.poseLandmarks) {
        // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏à‡∏∏‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏£‡πà‡∏≤‡∏á
        if (window.drawConnectors && window.POSE_CONNECTIONS) {
            try {
                window.drawConnectors(canvasCtx, poseResults.poseLandmarks, 
                    window.POSE_CONNECTIONS, {color: '#00FF00', lineWidth: 2});
            } catch (error) {
                console.warn('Error drawing connectors:', error);
            }
        }
        
        // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏≤‡∏°‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        highlightImportantLandmarks();
        
        // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î landmarks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if (window.drawLandmarks) {
            try {
                window.drawLandmarks(canvasCtx, poseResults.poseLandmarks, 
                    {color: '#FF0000', lineWidth: 1, radius: 3});
            } catch (error) {
                console.warn('Error drawing landmarks:', error);
            }
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        drawExerciseInfo();
    }
}

function highlightImportantLandmarks() {
    if (!poseResults.poseLandmarks || !window.drawLandmarks) return;
    
    const landmarks = poseResults.poseLandmarks;
    let highlightIndices = [];
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏≤‡∏°‡∏ó‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
    switch (currentExercise) {
        case 'butterfly-dance':
            if (autoDetectedSide === 'right') {
                highlightIndices = [12, 14, 16, 24]; // ‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏ß‡∏≤, ‡∏®‡∏≠‡∏Å‡∏Ç‡∏ß‡∏≤, ‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏Ç‡∏ß‡∏≤, ‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏Ç‡∏ß‡∏≤
            } else {
                highlightIndices = [11, 13, 15, 23]; // ‡πÑ‡∏´‡∏•‡πà‡∏ã‡πâ‡∏≤‡∏¢, ‡∏®‡∏≠‡∏Å‡∏ã‡πâ‡∏≤‡∏¢, ‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏ã‡πâ‡∏≤‡∏¢, ‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏ã‡πâ‡∏≤‡∏¢
            }
            break;
        case 'peacock':
            if (autoDetectedSide === 'right') {
                highlightIndices = [12, 14, 16]; // ‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏ß‡∏≤, ‡∏®‡∏≠‡∏Å‡∏Ç‡∏ß‡∏≤, ‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏Ç‡∏ß‡∏≤
            } else {
                highlightIndices = [11, 13, 15]; // ‡πÑ‡∏´‡∏•‡πà‡∏ã‡πâ‡∏≤‡∏¢, ‡∏®‡∏≠‡∏Å‡∏ã‡πâ‡∏≤‡∏¢, ‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏ã‡πâ‡∏≤‡∏¢
            }
            break;
        case 'dragon-claw':
            if (autoDetectedSide === 'right') {
                highlightIndices = [14, 16]; // ‡∏®‡∏≠‡∏Å‡∏Ç‡∏ß‡∏≤, ‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏Ç‡∏ß‡∏≤
            } else {
                highlightIndices = [13, 15]; // ‡∏®‡∏≠‡∏Å‡∏ã‡πâ‡∏≤‡∏¢, ‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏ã‡πâ‡∏≤‡∏¢
            }
            break;
        case 'tiger-roar':
            highlightIndices = [23, 24, 25, 26, 27, 28]; // ‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡πÅ‡∏•‡∏∞‡∏Ç‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            break;
        case 'flying':
            if (autoDetectedSide === 'right') {
                highlightIndices = [24, 26, 28]; // ‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏Ç‡∏ß‡∏≤, ‡πÄ‡∏Ç‡πà‡∏≤‡∏Ç‡∏ß‡∏≤, ‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤‡∏Ç‡∏ß‡∏≤
            } else {
                highlightIndices = [23, 25, 27]; // ‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏ã‡πâ‡∏≤‡∏¢, ‡πÄ‡∏Ç‡πà‡∏≤‡∏ã‡πâ‡∏≤‡∏¢, ‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤‡∏ã‡πâ‡∏≤‡∏¢
            }
            break;
    }
    
    // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå
    const highlightLandmarks = highlightIndices
        .map(index => landmarks[index])
        .filter(landmark => landmark && landmark.visibility > 0.5);
    
    if (highlightLandmarks.length > 0) {
        try {
            window.drawLandmarks(canvasCtx, highlightLandmarks, 
                {color: '#FFFF00', lineWidth: 3, radius: 6});
        } catch (error) {
            console.warn('Error highlighting landmarks:', error);
        }
    }
}

function drawExerciseInfo() {
    if (!canvasCtx) return;
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏á
    canvasCtx.font = '16px Arial';
    canvasCtx.fillStyle = '#FFFF00';
    canvasCtx.strokeStyle = '#000000';
    canvasCtx.lineWidth = 2;
    
    const sideText = `‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: ‡∏Ç‡πâ‡∏≤‡∏á${autoDetectedSide === 'right' ? '‡∏Ç‡∏ß‡∏≤' : '‡∏ã‡πâ‡∏≤‡∏¢'}`;
    canvasCtx.strokeText(sideText, 10, 30);
    canvasCtx.fillText(sideText, 10, 30);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (currentAngle > 0 && movementPhase !== 'rest') {
        const angleText = `‡∏°‡∏∏‡∏°: ${Math.round(currentAngle)}¬∞`;
        canvasCtx.strokeText(angleText, 10, 60);
        canvasCtx.fillText(angleText, 10, 60);
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ü‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
    if (movementPhase !== 'rest') {
        const phaseText = `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${getPhaseDisplayName(movementPhase)}`;
        canvasCtx.strokeText(phaseText, 10, 90);
        canvasCtx.fillText(phaseText, 10, 90);
    }
}

function getPhaseDisplayName(phase) {
    const phaseNames = {
        'lifting': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å',
        'lowering': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏î',
        'flexing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏á‡∏≠',
        'extending': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î',
        'moving': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß',
        'spreading': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏á',
        'holding': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡πà‡∏≤'
    };
    return phaseNames[phase] || phase;
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πà
// ========================================

function checkDependencies() {
    const requiredObjects = ['Pose', 'Camera'];
    const missing = [];
    
    requiredObjects.forEach(obj => {
        if (typeof window[obj] === 'undefined') {
            missing.push(obj);
        }
    });
    
    if (missing.length > 0) {
        console.error('Missing MediaPipe dependencies:', missing);
        showError(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ${missing.join(', ')}`);
        return false;
    }
    
    if (!videoElement || !canvasElement) {
        console.error('Missing DOM elements: video or canvas');
        showError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö video ‡∏´‡∏£‡∏∑‡∏≠ canvas');
        return false;
    }
    
    return true;
}
function ensureFunctionsExist() {
    console.log('üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const requiredFunctions = [
        'validateLandmarks',
        'updateAngleTracking', 
        'startMovementPhase',
        'completeRepetition',
        'startHoldTimer',
        'updateAccuracy',
        'displayMovementInfo',
        'updateCounters',
        'showFeedback'
    ];
    
    requiredFunctions.forEach(funcName => {
        if (typeof window[funcName] !== 'function') {
            console.warn(`‚ö†Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ${funcName} ‡πÑ‡∏°‡πà‡∏û‡∏ö`);
        } else {
            console.log(`‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ${funcName} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`);
        }
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const requiredVars = ['poseResults', 'currentExercise', 'movementPhase', 'repCounter'];
    requiredVars.forEach(varName => {
        if (typeof window[varName] === 'undefined') {
            console.warn(`‚ö†Ô∏è ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ${varName} ‡πÑ‡∏°‡πà‡∏û‡∏ö`);
        } else {
            console.log(`‚úÖ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ${varName} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:`, window[varName]);
        }
    });
    function runLegRaiseFix() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö...');
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    ensureFunctionsExist();
    
    // 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç analyzeCurrentExercise
    fixAnalyzeCurrentExercise();
    
    // 3. ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å
    window.analyzeLegRaise = analyzeLegRaise;
    window.resetExerciseState = resetExerciseState;
    window.testLegRaiseSystem = testLegRaiseSystem;
    
    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    setTimeout(testLegRaiseSystem, 500);
    
    console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    console.log('üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:');
    console.log('1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà 5: ‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤ ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π');
    console.log('2. ‡∏Å‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å');
    console.log('3. ‡∏¢‡∏Å‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á‡∏°‡∏∏‡∏° 45 ‡∏≠‡∏á‡∏®‡∏≤');
    console.log('4. ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ó‡πà‡∏≤ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ');
    console.log('5. ‡∏•‡∏î‡∏Ç‡∏≤‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
}}
runLegRaiseFix();

// 8. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
function debugLegRaise() {
    console.log('üêõ Debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡∏Ç‡∏≤:');
    console.log('- currentExercise:', currentExercise);
    console.log('- movementPhase:', movementPhase);
    console.log('- currentAngle:', currentAngle);
    console.log('- prevAngle:', prevAngle);
    console.log('- repCounter:', repCounter);
    console.log('- isDetecting:', isDetecting);
    console.log('- poseResults:', !!poseResults);
    
    if (poseResults && poseResults.poseLandmarks) {
        const landmarks = poseResults.poseLandmarks;
        console.log('- Landmarks ‡∏Ç‡∏≤:');
        console.log('  ‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏ã‡πâ‡∏≤‡∏¢ (23):', landmarks[23]?.visibility);
        console.log('  ‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏Ç‡∏ß‡∏≤ (24):', landmarks[24]?.visibility);
        console.log('  ‡πÄ‡∏Ç‡πà‡∏≤‡∏ã‡πâ‡∏≤‡∏¢ (25):', landmarks[25]?.visibility);
        console.log('  ‡πÄ‡∏Ç‡πà‡∏≤‡∏Ç‡∏ß‡∏≤ (26):', landmarks[26]?.visibility);
    }
}

// ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å console ‡πÑ‡∏î‡πâ
window.debugLegRaise = debugLegRaise;

// ========================================
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ window ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å HTML ‡πÑ‡∏î‡πâ
// ========================================

window.resetExerciseState = resetExerciseState;
window.updateUI = updateUI;
window.updateMovementData = updateMovementData;
window.updateAngleTracking = updateAngleTracking;
window.startMovementPhase = startMovementPhase;
window.completeRepetition = completeRepetition;